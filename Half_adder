Design

// Data Flow
module half_adder(a,b,s,c);
  input a,b;
  output s,c;
   
  assign s=a^b;
  assign c=a&b;
  
endmodule

// Behavioral
/*
module half_adder(s,c,a,b);
  input a,b;
  output reg s,c;
  
  always@(*)
    begin
      s=a^b;
      c=a&b;
    end
endmodule
*/

// structral
/*
module half_adder(s,c,a,b);
  input a,b;
  output s,c;
  
  xor xor1(s,a,b);
  and and1(c,a,b);
  
endmodule
*/


Testbenc

// Code your testbench here
// or browse Examples
module half_adder_tb;
  reg a,b;
  wire s,c;
  integer i;
  
  half_adder DUT(.s(s),.c(c),.a(a),.b(b));
  
  initial begin
    a=0;
    b=0;
  end
  
  initial begin
   
    $display("Time a  b  s  c");
    $display("----------------");
    
    $monitor("%3t  %b  %b  %b  %b", $time, a, b, s, c);
   
    for(i=0;i<4;i=i+1) begin
      {a,b}=i;
      #5;
    end
    #5;
    $display("simulation completed");
     #5;
    $finish;
   
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,half_adder_tb);
  end
  
endmodule















// This is self checking testbench 
/*
module half_adder_tb;
  reg a,b;
  wire s,c;
  integer i; // loop variable
  reg [1:0]expected_s_c; // expected output
  
  half_adder dut(.s(s),.c(c),.a(a),.b(b)); // instatiate DUT
  
 // Initialization
  initial begin  // Sets initial values to avoid undefined states.
    a=0;
    b=0;
  end
  
//   Stimulus and self checking
  initial begin
    $display("Time \t a b | s c | Expected | Status");
    $display("-------------------------------------");
   
    for(i=0; i<4; i=i+1) begin // testing all the combinations
      {a,b}=i; 
       #5;                     // waits for output to settle
      
//      calculate expected output        
      expected_s_c={a^b,a&b}; 
      
      
//       checking results
      if ({s,c} == expected_s_c)                                     
               $display("%0t \t %b %b| %b %b| %b %b|PASS",$time, a,b,s,c,expected_s_c[1], expected_s_c[0]);     
      else                                        
       
               $display("%0t \t %b %b| %b %b| %b %b|FAIL",$time, a,b,s,c,expected_s_c[1], expected_s_c[0]);  
    end        //                a  b| s c|expected| statue
             
                                                  //expected_s_c[1] is sum & expected_s_c[0] is carry
     // order of expected[1]|[0] depends on the 27th line declaration of logic if sum's logic written in 2nd term then the order must be this expected_s_c[0], expected[1] 
    
    
             #10;
             $display("Simulation Completed");
             $finish; // end of simulation
             end
  
  initial begin 
    $dumpfile("half_adder_tb.vcd");
    $dumpvars(0,half_adder_tb);
  end
  
         
             endmodule
*/

             
             
