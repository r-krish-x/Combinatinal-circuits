Design

// Code your design here
// dataflow

module full_adder(s,c,a,b,cin);
  input a,b,cin;
  output s,c;
   
  assign s=a^b^cin;
  assign c=a&b|b&cin|a&cin;
  
endmodule


// behavioral
/*
module full_adder(s,c,a,b,cin);
  input a,b,cin;
  output reg s,c;
  
  always@(*)begin
    s=a^b^cin;
    c=a&b|b&cin|a&cin;
  end
endmodule
*/

//  structural
/*
module half_adder(s,c,a,b);
  input a,b;
  output s,c;
  xor xor1(s,a,b);
  and and1(c,a,b);
endmodule

module full_adder(s,c,a,b,cin);
  input a,b,cin;
  output s,c;
  wire n1,n2,n3;
  
 half_adder ha1(n1,n2,a,b);
 half_adder ha2(s,n3,n1,cin);
  or or1(c,n3,n2);
endmodule
*/

Testbench

// Code your testbench here
// or browse Examples
module full_adder_tb;
  reg a,b,cin;
  wire s,c;
  integer i;
  
  full_adder DUT(.a(a),.b(b),.cin(cin),.s(s),.c(c));
  
  initial begin
    a=0;
    b=0;
    cin=0;
  end
  
  initial begin

    
     $display("Time  a  b cin  s  c");
    $display("-----------------------");
    
    $monitor("%3t|  %b  %b  %b   %b  %b",$time,a,b,cin,s,c);
    
    
    for(i=0;i<8;i=i+1)begin
      {a,b,cin} =i;
      #5;
    end
    
    #5;
    $finish;
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,full_adder_tb);
  end  
endmodule
