module decoder_2x4(i,en,y);
  input [1:0]i;
  input en;
  output reg[3:0]y;
  
  always@(*)begin
    if(en)begin
      y=4'b0000;
      y[i]=1;
      end
  
    else begin
      y=4'b0000;
    end
  end
endmodule

/*
module decoder_2x4(i,en,y);
  input [1:0]i;
  input en;
  output reg[3:0]y;
  integer k;
  
  always@(*)begin
    if(en)begin
      for(k=0;k<4;k=k+1)begin
          y[k]=(i==k)?1:0;
      end
    end
    else begin
      y=4'b0000;
    end
  end
endmodule
*/

/*
module decoder_2x4(input[1:0]i,
                  input en,
                   output reg [3:0]y);
  
  always@(*)begin
    if(en)begin
      case(i)
      2'b00: y=4'b0001;
      2'b01: y=4'b0010;
      2'b10: y=4'b0100;
      2'b11: y=4'b1000;
        default:y=4'b0000;
    endcase
  end
    else begin
      y=4'b0000;
    end
  end
endmodule

*/
    Testbench

    // Code your testbench here
// or browse Examples
module decoder_2x4_tb;
  reg[1:0]i;
  reg en;
  wire [3:0]y;
  
  decoder_2x4 dut(.i(i),.en(en),.y(y));
  
  initial begin
   en=0;
   i= 2'b00;
    
    $monitor("time=%0t i=%b  en=%b  y=%b",$time,i,en,y);
   
    #5 en=0;
    for (i=0;i<3;i=i+1)begin
    #5;
    end
    
    #5 en=1;
    for(i=0;i<3;i=i+1)begin
    #5;
    end
    
    #10;
    $finish;
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,decoder_2x4_tb);
  end
endmodule
