////////////////////////////Design///////////////////////////////////

module mux_4x1(i,s,y);
  input[3:0]i;
  input [1:0] s;
  output reg y;
  integer k;
  
  always @(*)begin
    for(k=0;k<4;k=k+1)begin
      if(s==k)
      y=i[k];
  end
  end
endmodule

/*module mux_4x1(
  input[3:0]i,
  input[1:0]s,
  output reg y);
  
  always@(*)begin
    case(s)
    2'b00: y=i[0];
    2'b01: y=i[1];
    2'b10: y=i[2];
    2'b11: y=i[3];
    default: y=1'b0; 
    
    endcase
  end
endmodule

  */

/////////////////////////////////////Testbench///////////////////////////////////

module tb_mux_4x1;
  reg[3:0]i;
  reg[1:0]s;
  wire y;
  integer k;
  
  mux_4x1 dut(.i(i),.s(s),.y(y));
  
  initial begin
    
    $monitor("time=%0t i=%b  s=%b  y=%b", $time, i,s,y);
    
    for(k=0;k<64;k=k+1)begin
      {s,i}=k;
      #5;
    end
    
    #5;
    $finish;
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0,tb_mux_4x1);
  end
  
endmodule

/*
module mux_4x1_tb;
  reg[3:0]i;
  reg[1:0]s;
  wire y;
  integer k;
  
  mux_4x1 dut(.i(i),.s(s),.y(y));
  
  initial begin
    
    $monitor("time=%0t i=%b  s=%b  y=%b",$time,i,s,y);
    
    for(k=0;k<4;k=k+1)begin
      s=k;
      i=4'b1010; //i =4'b1010  =>i[3]=1,i[2]=0,i[1]=1,i[0]=0
      #5;        //                11    00     01     00
    end         
//itcovers all the testcases 1.all high 2.all zero 3.one high one zero
    #5;
    $finish;
  end
  
  initial begin 
    $dumpfile("dump.vcd");
    $dumpvars(0,mux_4x1_tb);
  end
endmodule
*/

  
